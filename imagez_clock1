#include<cmath>
#include<cstdio>

#define _CRT_SECURE_NO_WARNINGS
#define GLFW_INCLUDE_GLU  // GLUライブラリを使用するのに必要
#include <GLFW/glfw3.h>

static int WIN_WIDTH = 500;                      // ウィンドウの幅
static int WIN_HEIGHT = 500;                     // ウィンドウの高さ
static const char* WIN_TITLE = "OpenGL Course";  // ウィンドウのタイトル
static const double fps = 30.0;  // 
static float theta = 0.0f;

void initializeGL() {
    // 背景色の設定 (黒)
    // Background color (black)
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    // 深度テストの有効化
    // Enable depth testing
    glEnable(GL_DEPTH_TEST);
}

void resizeGL(GLFWwindow* window, int width, int height) {
    // ユーザ管理のウィンドウサイズを変更
    // Update user-managed window size
    WIN_WIDTH = width;
    WIN_HEIGHT = height;

    // GLFW管理のウィンドウサイズを変更
    // Update GLFW-managed window size
    glfwSetWindowSize(window, WIN_WIDTH, WIN_HEIGHT);

    // 実際のウィンドウサイズ (ピクセル数) を取得
    // Get actual window size by pixels
    int renderBufferWidth, renderBufferHeight;
    glfwGetFramebufferSize(window, &renderBufferWidth, &renderBufferHeight);

    float ratio = WIN_WIDTH / WIN_HEIGHT;
    // ビューポート変換の更新
    // Update viewport transform
    glViewport(0, 0, renderBufferWidth, renderBufferHeight);
}

void paintGL() {
    // 背景色と深度値のクリア
    // Clear background color and depth values
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // 座標の変換
    // Coordinate transformation
    /*glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (float)WIN_WIDTH / (float)WIN_HEIGHT, 0.1f, 1000.0f);
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(3.0f, 4.0f, 5.0f,   // 視点の位置
        0.0f, 0.0f, 0.0f,   // 見ている先
        0.0f, 1.0f, 0.0f);  // 視界の上方向
        */
    glRotatef(theta, 0.0f, 0.0f, 1.0f);

    glBegin(GL_TRIANGLES);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex2f(2.5f, 1.0f);
    glVertex2f(1.0f, 2.5f);
    glVertex2f(0.0f, 0.0f);
    glEnd();
}

void animate() {
    theta += 1.0f;  // 1度だけ回転 / Rotate by 1 degree of angle
}

int main(int arg, char** argv) {
    if (glfwInit() == GL_FALSE) {
        fprintf(stderr, "Initialization failed!\n");
        return 1;
    }

    // Windowの作成
    // Create a window
    GLFWwindow* window = glfwCreateWindow(WIN_WIDTH, WIN_HEIGHT, WIN_TITLE,
        NULL, NULL);
    if (window == NULL) {
        fprintf(stderr, "Window creation failed!\n");
        glfwTerminate();
        return 1;
    }

    // OpenGLの描画対象にwindowを指定
    // Specify window as an OpenGL context
    glfwMakeContextCurrent(window);

    // ウィンドウのリサイズを扱う関数の登録
    // Register a callback function for window resizing
    glfwSetWindowSizeCallback(window, resizeGL);

    // ユーザ指定の初期化
    // User-specified initialization
    initializeGL();

    double prevTime = glfwGetTime();
    while (glfwWindowShouldClose(window) == GLFW_FALSE) {
        // 現在の時刻を取得
        // Acquire a current time
        double currentTime = glfwGetTime();

        // 経過時間が 1 / FPS 以上なら描画する
        // Perform drawing if elapsed time is more than one over FPS
        if (currentTime - prevTime >= 1.0 / fps) {
            // タイトルにFPSを表示
            // Show FPS in title
            double realFps = 1.0 / (currentTime - prevTime);
            char winTitle[256];
            sprintf(winTitle, "%s (%.3f)", WIN_TITLE, realFps);
            glfwSetWindowTitle(window, winTitle);

            // 描画
            // Draw
            paintGL();

            // アニメーション
            // Animation
            animate();

            // 描画用バッファの切り替え
            // Swap drawing target buffers
            glfwSwapBuffers(window);
            glfwPollEvents();

            // 前回描画時間の更新
            // Update latest time of drawing
            prevTime = currentTime;
        }
    }


    glfwDestroyWindow(window);
    glfwTerminate();
}
